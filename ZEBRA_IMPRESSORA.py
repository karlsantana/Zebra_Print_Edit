from PyQt5 import QtCore, QtGui, QtWidgets#from simplecrypt import encrypt, decryptimport threadingfrom zebra import Zebraimport os.pathimport json#from simplecrypt import encrypt, decryptfrom PyQt5.QtGui import *from PyQt5.QtWidgets import *from serial.tools import list_portsimport jsonimport threadingimport osimport serialimport timefrom PyQt5.QtWidgets import QApplication, QWidget, QMainWindow, QPushButton, QAction, QMessageBox, QVBoxLayoutimport warningsimport requests#import usb#import bbimport sqlite3import webbrowserfrom pathlib import Pathimport reimport subprocessimport win32com.client#import usbimport tela2_0import xyzimport timeimport sysimport os.pathimport serial.tools.list_portsfrom PyQt5 import QtCore, QtGui, QtWidgetsimport threadingfrom zebra import Zebraimport os.pathimport json#rom simplecrypt import encrypt, decryptimport warningsimport serialimport serial.tools.list_portsimport subprocessimport osimport timefrom PyQt5.QtWidgets import QApplication, QWidget, QMainWindow, QPushButton, QAction, QMessageBox, QVBoxLayoutimport bb#import login32from datetime import datetimeimport sqlite3from pathlib import Pathimport webbrowserimport requestsimport socketTags= Noneimport sqlite3Impressaozpl=Noneindex = -1class Banco:    def __init__(self, parent=None,nomeDoBanco: str = "jiga_novo_banco.db",jigaTable:str = "jiga nao definida",numeroDaJiga:str = "Nao definida",deviceNome:str = "nao definido",campos: tuple = [],variaveis = None):        self.parent = parent        self.nomeBanco = nomeDoBanco        self.jigaTable = jigaTable        self.campos = campos        self.deviceNome = deviceNome        self.numeroDaJiga = numeroDaJiga        self.variaveis = variaveisclass Dispositivo:    def __init__(self, parent=None,idDevice: int = None,serialDevice: str = None,aprovado: bool = None,dbm: bool =  None,radiacao: bool = None,gravacao: bool = None,variacaoAdc: bool = None,variacaoCristal: bool = None,holtek: bool = None,cadastroLora: bool = None):        self.idDevice = idDevice        self.serialDevice = serialDevice        self.aprovado = aprovado        self.dbm = dbm        self.radiacao = radiacao        self.gravacao = gravacao        self.variacaoAdc = variacaoAdc        self.variacaoCristal = variacaoCristal        self.holtek = holtek        self.cadatroLora = cadastroLoraclass Jiga(QMainWindow, xyz.Ui_MainWindow):    def __init__(self, parent=None):        super().__init__(parent)        super().setupUi(self)        self.pushButton_2.clicked.connect(self.abrir_form_tela1)        self.pushButton.clicked.connect(self.imprimir)        self.impressaoAtual = None        self.sn = None        self.sem = threading.Semaphore()        self.run_thread = None        def mudou():            self.checarRadioButton()        #if self.radio_central.toggled.connect(mudou) == False:            #print("funfou")        #self.radio_duplo.toggled.connect(mudou)        #self.pushButton.setEnabled(False)        self.printarar_zpl()        self.radio_duplo.toggled.connect(mudou)        self.radio_central.toggled.connect(mudou)        self.zplAtual = self.pegarZplAbrindo()        if self.zplAtual is not None:            #print(self.zplAtual)            self.label_3.setText(self.zplAtual["nome"])            self.label_4.setText(self.zplAtual["modelo"])            self.label_2.setFont(QFont('Times', 20))            self.label.setFont(QFont('Times', 20))            self.label_4.setFont(QFont('Times', 20))            self.label_4.setFont(QFont('Times', 20))            self.label_3.setFont(QFont('Times', 20))            self.pushButton.setFont(QFont('Times', 20))            self.pushButton_2.setFont(QFont('Times', 15))            self.radio_duplo.setFont(QFont('Times', 10))            self.radio_central.setFont(QFont('Times', 10))            self.radio_central.setFont(QFont('Times', 10))            #pushButton_2            #and size            #self.label_2.setFont(QFont('Times', 10))            i = self.zplAtual["indexZplUsando"]            if i == 0:                print("oia1")                self.zplAtual["nome"]               # print(self.getComandoZpl())                print("comando central")                self.radio_central.setChecked(True)            elif i == 1:                print("oia2")                #print(self.getComandoZpl())                print("comando duplo")                self.radio_duplo.setChecked(True)            else:                print("oia3")                self.radio_central.setChecked(False)                self.radio_duplo.setChecked(False)    def getComandoZpl(self):        i = self.zplAtual["indexZplUsando"]        #x=None        if i == 0:           # print(Linha[6])           #y=self.zplAtual["zplComandCentral"]            return self.zplAtual["zplComandCentral"]            #x=self.zplAtual["zplComandCentral"]        elif i == 1:            return self.zplAtual["zplComandDuplo"]            #x=self.zplAtual["zplComandDuplo"]        #return x    def abrir_form_tela1(self):            self.loginform = tela2_0.Jiga1()            self.loginform.set_jiga(self)            self.loginform.show()            self.close()    def set_jiga(self, jiga1):            self.Jiga = jiga1    def checarRadioButton(self):        global index        if self.radio_central.isChecked():            index = 0            #print("comando central1")            #print(self.getComandoZpl())            #print(self.zpl["zplComandCentral"])        elif self.radio_duplo.isChecked():            index =  1            #print("comando duplo1")            #print(self.getComandoZpl())        if self.setRadioButton(self.zplAtual,index) == True:            print("alterou")            #print(self.getComandoZpl())        else:            print("n√°o alterou")    def setRadioButton(self, zpl, index):        con = None        try:            id = zpl["id"]            con = sqlite3.connect('serialprodutosbottomup.db')            cur = con.cursor()            query = """UPDATE zplconfig SET indexZplUsando=? WHERE id=?"""            cur.execute(query, (index, id))            con.commit()            return True        except Exception as e:            print(e)            return False        finally:            if con is not None:                con.close();    def pegarZplAbrindo(self):        con = None        try:            con = sqlite3.connect('serialprodutosbottomup.db')            cur = con.cursor()            query = """SELECT * FROM zplconfig WHERE abrindo=true"""            cur.execute(query)            for linha in cur.fetchall():                # print(linha)                zpl = {"id": linha[0],                       "nome": linha[1],                       "descricao": linha[2],                       "zplComandCentral": linha[3],                       "atual": linha[4],                       "zplComandDuplo": linha[5],                       "indexZplUsando": linha[6],                       "editando": linha[7],                       "abrindo": linha[8],                       "modelo": linha[9]}                #print (zpl["zplComandCentral"])                return zpl            return None        except Exception as e:            print(e)            return None        finally:            if con is not None:                con.close();    def printarar_zpl(self):        global Tags        con = None        try:            con = sqlite3.connect('serialprodutosbottomup.db')            cur = con.cursor()            query = """SELECT * FROM zplconfig WHERE abrindo=true"""            cur.execute(query)            for linha in cur.fetchall():                # print(linha)                zpl = {"id": linha[0],                       "nome": linha[1],                       "descricao": linha[2],                       "zplComandCentral": linha[3],                       "atual": linha[4],                       "zplComandDuplo": linha[5],                       "indexZplUsando": linha[6],                       "editando": linha[7],                       "abrindo": linha[8],                       "modelo": linha[9]}                #print(zpl[8])                if zpl["nome"] == "SEMPREGAS":                    Tags = """["Sempregas_1(comFf)"]"""                    print(Tags)                if zpl["nome"] == "TX_400":                    Tags = """["Tx_400"]"""                    print(Tags)                if zpl["nome"] == "TX_100":                    Tags = """["Tx_100"]"""                    print(Tags)                   # print(Tags)                return zpl            return None        except Exception as e:            print(e)            return None        finally:            if con is not None:                con.close();    def imprimir(self):        global Impressaozpl        self.pushButton.setEnabled(False)        if self.radio_duplo.isChecked():            Impressaozpl=self.zplAtual["zplComandDuplo"]            print(Impressaozpl)            self.inicio_da_thread()            #self.pushButton.setEnabled(True)            #self.close        elif self.radio_central.isChecked():            Impressaozpl = self.zplAtual["zplComandCentral"]            print(Impressaozpl)            self.inicio_da_thread()            #self.close    def inicio_da_class_thread(self):        #self.sem.acquire()        if self.run_thread is not None:            self.run_thread.requestInterruption()            print("matou a thread")        time.sleep(0.1)        self.run_thread = RunThread(parent=None)        self.run_thread.Jiga = self        self.run_thread.start()    def inicio_da_thread(self):        time.sleep(1)        self.inicio_da_class_thread()        #time.sleep(0.1)class RunThread(QtCore.QThread):    def __init__(self, parent=None):        print("Executando init de RunThread")        super(RunThread, self).__init__(parent)        self.Jiga = None        self.idImpressora=None    def run(self):            if self.Jiga:                time.sleep(0.1)            try:                #print(self.contador)                self.etapa_final()                #self.Holtek()                self.Jiga.pushButton.setEnabled(True)                print("acabou o teste")                #self.Jiga.btnSTART.setEnabled(True)                #self.Jiga.sem.release()                # time.sleep(5)                # self.etapa_final()            except:                print("erro acabou a Run")    def imprimirNaImpressora(self):        try:            cmd2 = self.printLabel()            # Envia o array de byte para a impressora            self.z.output(cmd2)        except:            print("erro")    def getPrinter(self,z: Zebra):        impressora = None        impressoras = z.getqueues()        for i in impressoras:            print(i)            #if i.find("GC405") or  is not -1:            if 'ZDesigner GC420t (EPL)' in i:                print("ZDesigner GC420t (EPL)")                impressora = i                break            #elif "ZDesigner" in i:                #print("ZDesigner qualaquer")               # impressora = i               # break        if impressora is not None:                return impressora        print("Impressora nao encontrada")        return None    def configurePrinter(self, labelHomeX, labelHomeY):        try:           # comando = "^XA"            labelHomeX = str(labelHomeX)            labelHomeY = str(labelHomeY)            comando += "\r\n^LH" + labelHomeX + "," + labelHomeY            # setar velocidade de impress√£o e de back vai de 2 a 12            comando += "^PR2,2"            # ativamento do sensor com GAP            comando += "^MWN"            # modo de impress√£o PEEL OFF            #comando += "^MMP"            # t√©rmica direta            #comando += "^MTD"            # salva as configura√ß√µes na impressora            comando += "^JUS^XZ\r\n\r\n"            # tirar os \r\n            comando = comando.replace("\r\n", "")            b = bytes(comando, 'utf-8')            return b        except:            print("Erro")    def printLabel(self):        global Impressaozpl        #comando = "^XA"        #comando = comando.replace("\r\n", "")        #Impressaozpl = Impressaozpl.replace("#{serial}",self.idImpressora)        # comando += "^D8"        print(Impressaozpl)        b = bytes(Impressaozpl, 'utf-8')        return b        def etapa_final(self):        #respostaDaRequisicao = self.send_post(self.idImpressora)        #if respostaDaRequisicao[0] == False:            #self.Jiga.lineEdit_CADASTROLORA.setText("REPROVADO")            #self.cadastro_lora_status = False            #print("Reprovado")            #return        print("vai imprimir")        self.z = Zebra()        # self.z.reset_default()        self.pri = self.getPrinter(self.z)        self.z.setqueue(self.pri)        cmd1 = self.configurePrinter(3, 0)        # Envia o comando para a impressora        self.z.output(cmd1)        self.imprimirNaImpressora()        self.Jiga.pushButton.setEnabled(True)        print("etapa final")        print("Executando init de RunThread")if __name__ == '__main__':    import sys    qt = QtWidgets.QApplication(sys.argv)    jiga_teste = Jiga()    jiga_teste.show()    qt.exec_()